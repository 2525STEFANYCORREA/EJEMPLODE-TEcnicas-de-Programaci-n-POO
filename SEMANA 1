from abc import ABC, abstractmethod

class Figura(ABC):
    @abstractmethod
    def calcular_area(self):
        pass

class Circulo(Figura):
    def __init__(self, radio):
        self.radio = radio

    def calcular_area(self):
        return 3.1416 * (self.radio ** 2)

# Uso
circulo = Circulo(5)
print(f"Área del círculo: {circulo.calcular_area():.2f}")



Encapsulación
class CuentaBancaria:
    def __init__(self, titular, saldo):
        self.titular = titular
        self.__saldo = saldo  # Atributo privado

    def depositar(self, cantidad):
        if cantidad > 0:
            self.__saldo += cantidad

    def retirar(self, cantidad):
        if 0 < cantidad <= self.__saldo:
            self.__saldo -= cantidad

    def obtener_saldo(self):
        return self.__saldo

# Uso
cuenta = CuentaBancaria("Ana", 1000)
cuenta.depositar(500)
cuenta.retirar(200)
print(f"Saldo actual: ${cuenta.obtener_saldo()}")




Herencia
class Animal:
    def __init__(self, nombre):
        self.nombre = nombre

    def hablar(self):
        return "Hace un sonido"

class Perro(Animal):
    def hablar(self):
        return "Ladra"

# Uso
mi_perro = Perro("Max")
print(f"{mi_perro.nombre} {mi_perro.hablar()}")




Polimorfismo
class Gato:
    def hacer_sonido(self):
        return "Miau"

class Vaca:
    def hacer_sonido(self):
        return "Muuu"

def reproducir_sonido(animal):
    print(animal.hacer_sonido())

# Uso
animales = [Gato(), Vaca()]
for a in animales:
    reproducir_sonido(a)


