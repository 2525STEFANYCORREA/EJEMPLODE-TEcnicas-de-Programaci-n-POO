import os

class Producto:
    def __init__(self, nombre, cantidad):
        self.nombre = nombre
        self.cantidad = cantidad

    def __str__(self):
        return f"{self.nombre},{self.cantidad}"

    @staticmethod
    def desde_linea(linea):
        try:
            nombre, cantidad = linea.strip().split(',')
            return Producto(nombre, int(cantidad))
        except ValueError:
            raise ValueError("Formato inválido de línea en archivo de inventario")


class Inventario:
    def __init__(self, archivo='inventario.txt'):
        self.archivo = archivo
        self.productos = {}
        self.cargar_inventario()

    def cargar_inventario(self):
        """Carga los productos del archivo de inventario si existe."""
        if not os.path.exists(self.archivo):
            print("[INFO] Archivo inventario.txt no encontrado. Se creará uno nuevo al guardar.")
            return
        try:
            with open(self.archivo, 'r') as f:
                for linea in f:
                    if linea.strip():
                        producto = Producto.desde_linea(linea)
                        self.productos[producto.nombre] = producto
            print("[INFO] Inventario cargado exitosamente.")
        except FileNotFoundError:
            print("[ERROR] Archivo no encontrado durante la carga.")
        except PermissionError:
            print("[ERROR] Permiso denegado para leer el archivo de inventario.")
        except ValueError as e:
            print(f"[ERROR] {e}. Se recomienda revisar el formato del archivo.")

    def guardar_inventario(self):
        """Guarda el estado actual del inventario en el archivo."""
        try:
            with open(self.archivo, 'w') as f:
                for producto in self.productos.values():
                    f.write(str(producto) + '\n')
            print("[INFO] Inventario guardado exitosamente.")
        except PermissionError:
            print("[ERROR] Permiso denegado para escribir en el archivo de inventario.")
        except Exception as e:
            print(f"[ERROR] Error inesperado al guardar: {e}")

    def agregar_producto(self, nombre, cantidad):
        """Agrega un nuevo producto y actualiza archivo."""
        if nombre in self.productos:
            print(f"[ERROR] Producto '{nombre}' ya existe.")
            return
        self.productos[nombre] = Producto(nombre, cantidad)
        self.guardar_inventario()

    def actualizar_producto(self, nombre, cantidad):
        """Actualiza cantidad de producto existente y guarda cambios."""
        if nombre in self.productos:
            self.productos[nombre].cantidad = cantidad
            self.guardar_inventario()
        else:
            print(f"[ERROR] Producto '{nombre}' no existe.")

    def eliminar_producto(self, nombre):
        """Elimina un producto y actualiza archivo."""
        if nombre in self.productos:
            del self.productos[nombre]
            self.guardar_inventario()
        else:
            print(f"[ERROR] Producto '{nombre}' no existe.")

    def mostrar_inventario(self):
        """Muestra en consola el inventario actual."""
        if not self.productos:
            print("[INFO] El inventario está vacío.")
        else:
            for producto in self.productos.values():
                print(f"Producto: {producto.nombre}, Cantidad: {producto.cantidad}")


# --- Ejemplo de uso ---
if __name__ == "__main__":
    inv = Inventario()

    # Pruebas básicas
    inv.agregar_producto('Manzanas', 10)
    inv.actualizar_producto('Manzanas', 20)
    inv.mostrar_inventario()
    inv.eliminar_producto('Manzanas')
    inv.mostrar_inventario()

    # Para pruebas exhaustivas:
    # - Intenta cambiar los permisos del archivo inventario.txt para simular errores de escritura o lectura
    # - Modifica el archivo inventario.txt manualmente para introducir formatos erróneos y verifica manejo
